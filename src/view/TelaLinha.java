/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import classes.*;
import com.sun.javafx.image.impl.ByteRgb;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author isaacmsl
 */
public class TelaLinha extends javax.swing.JFrame {

    /**
     * Creates new form TelaColuna
     */
    
    private int qntColunas;
    private ArrayList<Coluna> colunas;
    private Tabela tabela;
    private int indexArray;
    private ArrayList<String> tupla;
    private int indexColunaPrimaria;
    private ArrayList<String> chavesPrimarias;



    
    public TelaLinha(Tabela tabela) {
        chavesPrimarias = new ArrayList();
        initComponents();
        this.tabela = tabela;
        colunas = this.tabela.getColunas();
        qntColunas = colunas.size();
        tupla = new ArrayList<>();
        
        showColuna(colunas.get(indexArray));
        int index = 0;
        for(Coluna c : colunas){
            if(c.isChavePrimaria()){
               indexColunaPrimaria = index; 
            }
            index++;
        }
         for(String[] linhas : tabela.getLinhas()){
             chavesPrimarias.add(linhas[indexColunaPrimaria]);
         }    
         if(txtColuna.getText().contains("primary key")){
             btnGerarChave.setEnabled(true);
         }else{
             btnGerarChave.setEnabled(false);
         }
             
         
    } 
    
    

    
    public TelaLinha() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        panelNome = new javax.swing.JPanel();
        lblValor = new javax.swing.JLabel();
        getValor = new javax.swing.JTextField();
        panelTipo = new javax.swing.JPanel();
        lblColuna = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtColuna = new javax.swing.JLabel();
        btnGerarChave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        panel.setBackground(new java.awt.Color(255, 255, 255));

        panelNome.setBackground(new java.awt.Color(255, 255, 255));
        panelNome.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelNome.setEnabled(false);

        lblValor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblValor.setText("Valor:");

        javax.swing.GroupLayout panelNomeLayout = new javax.swing.GroupLayout(panelNome);
        panelNome.setLayout(panelNomeLayout);
        panelNomeLayout.setHorizontalGroup(
            panelNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNomeLayout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(lblValor)
                .addContainerGap())
        );
        panelNomeLayout.setVerticalGroup(
            panelNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblValor)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getValor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getValorActionPerformed(evt);
            }
        });

        panelTipo.setBackground(new java.awt.Color(255, 255, 255));
        panelTipo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelTipo.setOpaque(false);

        lblColuna.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblColuna.setText("Coluna:");

        javax.swing.GroupLayout panelTipoLayout = new javax.swing.GroupLayout(panelTipo);
        panelTipo.setLayout(panelTipoLayout);
        panelTipoLayout.setHorizontalGroup(
            panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTipoLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(lblColuna)
                .addContainerGap())
        );
        panelTipoLayout.setVerticalGroup(
            panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTipoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblColuna)
                .addContainerGap())
        );

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(255, 255, 255));
        btnLimpar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(255, 255, 255));
        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtColuna.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnGerarChave.setBackground(new java.awt.Color(255, 255, 255));
        btnGerarChave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGerarChave.setText("Gerar chave");
        btnGerarChave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarChaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGerarChave, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(getValor)
                            .addComponent(txtColuna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(btnLimpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addGap(22, 22, 22))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(getValor)
                    .addComponent(panelNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtColuna, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd)
                        .addComponent(btnLimpar)
                        .addComponent(btnCancel))
                    .addComponent(btnGerarChave))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getValorActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        
        
        String valor = getValor.getText();
        
        boolean empty = valor.equals("");

        if (empty) {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
        }else{ 
            if(indexArray < colunas.size()){
                Coluna colunaAtual = colunas.get(indexArray++);
                String valorLido = getValor.getText();
                boolean chaveJaExiste = false;
                
                try {
                    tipoCorreto(valorLido, colunaAtual);
                    
                    if (colunaAtual.isChavePrimaria()) {
                        if (getChavesP(colunaAtual).contains(Integer.parseInt(valorLido))) {
                            JOptionPane.showMessageDialog(null, "Chave primária já existe!");
                            chaveJaExiste = true;
                            --indexArray;
                        }
                    }

                    if (!chaveJaExiste) {
                        tupla.add(valorLido);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Insira valores válidos!");
                    --indexArray;
                }
                
                
            }
            
            if (indexArray < colunas.size()) {
                showColuna(colunas.get(indexArray));
            } else {
                JOptionPane.showMessageDialog(null, "Todos os valores foram inseridos!");
                
                tabela.addLinha(tupla);

                ArrayList<Tabela> tabelasExistentes = null;
                try {
                    tabelasExistentes = ManipuladorIOFiles.lerArquivoTabela("tabelas.dat");
                    
                    ArrayList<Tabela> tabelasParaSalvar = null;
                    
                    tabelasParaSalvar = tabelasExistentes;
                    
                    int indexTabelaSelected = tabelasParaSalvar.indexOf(tabela);
                    
                    
                    tabelasParaSalvar.set(indexTabelaSelected, tabela);

                    try {
                        ManipuladorIOFiles.gravarArquivo("tabelas.dat", tabelasParaSalvar, false);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Não foi possível gravar o arquivo!");
                    }

                    this.dispose();
                    
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Erro inesperado ao ler arquivo!");
                }
                
            }
       }    //Verificar se a coluna é chave primaria para deixar desponivel o botão GERAR CHAVE!!!
            if(txtColuna.getText().contains("primary key")){
                 btnGerarChave.setEnabled(true);
            }else{
              btnGerarChave.setEnabled(false);
            }
        
            limpar();
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnGerarChaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarChaveActionPerformed
        Random gerarChave = new Random();
         //VERIFICA SE A CHAVE PRIMARIA JA EXISTE NA TABELA
        int chave = gerarChave.nextInt(100)+1;
        while(chavesPrimarias.contains(String.valueOf(chave))){
            chave = gerarChave.nextInt(100)+1;
        }
       
        getValor.setText(String.valueOf(chave));    


        // TODO add your handling code here:
    }//GEN-LAST:event_btnGerarChaveActionPerformed

    /**
     * @param args the command line arguments
     */
    //EXECUTA O CODIGO 
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaLinha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaLinha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaLinha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaLinha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaLinha().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGerarChave;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JTextField getValor;
    private javax.swing.JLabel lblColuna;
    private javax.swing.JLabel lblValor;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panelNome;
    private javax.swing.JPanel panelTipo;
    private javax.swing.JLabel txtColuna;
    // End of variables declaration//GEN-END:variables

    private void limpar() {
        // LIMPA O TEXTO
        getValor.setText("");
    }

    private void tipoCorreto(String valorLido, Coluna coluna) throws Exception {
        //PEGA O TIPO DA COLUNA E TRANFORMA EM STRING PARA VERIFICAR SE É UM TIO EXISTENTE
        String tipoColuna = coluna.getTipo();
        
        switch (tipoColuna) {
            case "Int":
            case "int":
                try {
                    int num = Integer.valueOf(valorLido);
                } catch (Exception e) {
                    throw e;
                } 
                break;
            case "Boolean":
            case "boolean":
                if(!(valorLido.equalsIgnoreCase("true") || 
                        valorLido.equalsIgnoreCase("false"))) {
                    Exception e = new Exception();
                    throw e;
                }
                break;
            case "Double":
            case "double":
                try {
                    double dob = Double.valueOf(valorLido);
                }  catch (Exception e) {
                    throw e;
                }
                break;
        }
    }
    //IMPRIME O A COLUNA QUE O USUARIO IRA PREENCHER NA TELA
    private void showColuna(Coluna coluna) {
        StringBuilder sb = new StringBuilder();
        sb.append(coluna.getNome());
        sb.append(" : ");
        sb.append(coluna.getTipo());
        
        if (coluna.isChavePrimaria()) {
            sb.append(" (primary key)");
        }
        
        txtColuna.setText(sb.toString());
    }
    
    private ArrayList<Integer> getChavesP(Coluna colunaAtual){
        ArrayList<Integer> chavesP = new ArrayList<>();
        int indexColuna = this.tabela.getColunas().indexOf(colunaAtual);
        
        for(String[] linha : this.tabela.getLinhas()){
            chavesP.add(Integer.parseInt(linha[indexColuna]));
        }
        
        return chavesP;
    } 

}
